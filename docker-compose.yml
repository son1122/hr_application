version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      args:
        NODE_ENV: development
    restart: always
    networks:
      - my-network
    ports:
      - "3000:3000"
    depends_on:
      - api_gateway
    volumes:
      - ./frontend:/app

  api_gateway:
    build:
      context: ./api_gateway
      args:
        NODE_ENV: development
    restart: always
    networks:
      - my-network
#       command: sh -c 'node -r ./tracing.js index.js'
    environment:
      - SERVICE=api_gateway
    ports:
      - "3004:3004"
    depends_on:
      - idp_service
      - evaluation_service
      - rabbitmq
    volumes:
      - ./api_gateway:/app

  idp_service:
    build:
      context: ./idp_service
      args:
        NODE_ENV: development
    restart: always
    networks:
      - my-network
    #    command: sh -c 'node -r ./tracing.js index.js'
    environment:
      - SERVICE=idp_service
    ports:
      - "3005:3005"
    depends_on:
      - idp_db
      - rabbitmq
    volumes:
      - ./idp_service:/app

  evaluation_service:
    build:
      context: ./evaluation_service
      args:
        NODE_ENV: development
    restart: always
    networks:
      - my-network
    #    command: sh -c 'node -r ./tracing.js index.js'
    environment:
      - SERVICE=evaluation_service
    ports:
      - "3006:3006"
    depends_on:
      - evaluation_db
      - rabbitmq
    volumes:
      - ./evaluation_service:/app

  rabbitmq:
    image: "rabbitmq:3-management"
    restart: always
    networks:
      - my-network
    environment:
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "rabbitmq"
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:
      - "15672:15672"
      - "5672:5672"

  idp_db:
    image: postgres:13
    restart: always
    networks:
      - my-network
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: idp_db
    volumes:
      - idp_db_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
  evaluation_db:
    image: postgres:13
    restart: always
    networks:
      - my-network
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: evaluation_db
    volumes:
      - evaluation_db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"

  prometheus:
    image: prom/prometheus:v2.28.1
    restart: always
    networks:
      - my-network
    volumes:
      - ./prometheus:/etc/prometheus
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:8.1.1
    restart: always
    networks:
      - my-network
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana

  jaeger:
    image: jaegertracing/all-in-one:1.45.0
    restart: always
    networks:
      - my-network
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: "9411"
    ports:
      - "16686:16686"
      - "6831:6831/udp"
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.1
    restart: always
    networks:
      - my-network
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - '9200:9200'

  logstash:
    image: docker.elastic.co/logstash/logstash:7.15.1
    restart: always
    networks:
      - my-network
    volumes:
      - ./logstash:/usr/share/logstash/pipeline
    ports:
      - '5002:5000'
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:7.15.1
    restart: always
    networks:
      - my-network
    ports:
      - '5601:5601'
    depends_on:
      - elasticsearch

  alertmanager:
    image: prom/alertmanager:v0.22.2
    restart: always
    networks:
      - my-network
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
    ports:
      - '9093:9093'

volumes:
  idp_db_data:
  evaluation_db_data:
  grafana_data:
  esdata:
  logstash_pipeline:
  rabbitmq_data:

networks:
  my-network:
    driver: bridge
